/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vacunasgrupo18.Vistas;

import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import vacunasgrupo18.AccesoADatos.CiudadanoData;
import vacunasgrupo18.Entidades.Ciudadano;

/**
 *
 * @author lucia
 */
public class GestionCiudadanos extends javax.swing.JInternalFrame {

    private List <Ciudadano> listaC;
    CiudadanoData cData;
    private DefaultTableModel modelo;
    
    public GestionCiudadanos() {
        initComponents();
        
        cData = new CiudadanoData();
        listaC = cData.listarCiudadanos();
        modelo = new DefaultTableModel();
        
        armarCabeceraTabla();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtCiudadanos = new javax.swing.JTable();
        jbEliminar = new javax.swing.JButton();
        jbCargar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Gestion de Ciudadanos");
        setPreferredSize(new java.awt.Dimension(600, 396));

        jtCiudadanos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtCiudadanos.setMinimumSize(new java.awt.Dimension(550, 395));
        jtCiudadanos.setPreferredSize(new java.awt.Dimension(550, 395));
        jScrollPane1.setViewportView(jtCiudadanos);

        jbEliminar.setText("Eliminar");
        jbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarActionPerformed(evt);
            }
        });

        jbCargar.setText("Cargar Datos");
        jbCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCargarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbCargar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbEliminar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbEliminar)
                    .addComponent(jbCargar))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCargarActionPerformed
        
        borrarFilaTabla();
        cargarDatos();
        
    }//GEN-LAST:event_jbCargarActionPerformed

    private void jbEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarActionPerformed
        
        int filaSeleccionada = jtCiudadanos.getSelectedRow();
        
        
        if(filaSeleccionada != -1){
            
            int dni = (Integer) modelo.getValueAt(filaSeleccionada, 0);
            
            cData.eliminarCiudadano(dni);
            
            borrarFilaTabla();
            
        }
        
        
    }//GEN-LAST:event_jbEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCargar;
    private javax.swing.JButton jbEliminar;
    private javax.swing.JTable jtCiudadanos;
    // End of variables declaration//GEN-END:variables

    public void armarCabeceraTabla(){
         
         ArrayList<Object> filaCabecera = new ArrayList<>();
         filaCabecera.add("DNI");
         filaCabecera.add("Nombre Completo");
         filaCabecera.add("Email");
         filaCabecera.add("Celular");
         filaCabecera.add("PatologÃ­al");
         filaCabecera.add("Ambito de Trabajo");
         
         for(Object it: filaCabecera){
             
             modelo.addColumn(it);
             
         }
         
         jtCiudadanos.setModel(modelo);
         
     }
    
    private void borrarFilaTabla(){
         
         int indice = modelo.getRowCount() -1;
         
         for (int i = indice; i>=0; i--){
             
             modelo.removeRow(i);
             
         }
         
      
    }
    
    public void cargarDatos(){
         
         List <Ciudadano> lista = cData.listarCiudadanos();
         
         for(Ciudadano c : lista){
             
             modelo.addRow(new Object[] {c.getDni(), c.getNombreCompleto(), c.getEmail(), c.getCelular(), c.getPatologia(), c.getAmbitoTrabajo()});
             
         }
         
     }


}
